#!/bin/bash
###############################################################################
# This script is the command that is executed every run.
# Check the examples in examples/
#
# This script is run in the execution directory (execDir, --exec-dir).
#
# PARAMETERS:
# $1 is the candidate configuration number
# $2 is the instance ID
# $3 is the seed
# $4 is the instance name
# The rest ($* after `shift 4') are parameters to the run
#
# RETURN VALUE:
# This script should print one numerical value: the cost that must be minimized.
# Exit with 0 if no error, with 1 in case of error
###############################################################################
error() {
    echo "`TZ=UTC date`: $0: error: $@"
    cat $tmpfile
    rm -f $tmpfile
    exit 1
}
tmpfile=$(mktemp)  

# This parses the arguments given by irace. Do not touch it!
CONFIG_ID=$1
INSTANCE_ID=$2
SEED=$3
INSTANCE=$4
shift 4 || error "Not enough parameters"
CONFIG_PARAMS=$*
# End of parsing

## Find our own location.
# BINDIR=$(dirname "$(readlink -f "$(type -P $0 || echo $0)")")

# EDIT THIS: Path to your executable
# EXE=$(which julia)
# echo "Using julia executable at: $EXE"
# echo "PWD : $PWD"

# EDIT THIS: Specify how parameters are given to your executable
EXE_PARAMS="--time 5 -i $INSTANCE --seed ${SEED} ${CONFIG_PARAMS}"

# if [ ! -x "$(command -v ${EXE})" ]; then
    # error "${EXE}: not found or not executable (pwd: $(pwd))"
# fi

# # If the program just prints a number, we can use 'exec' to avoid creating
# # another process, but there can be no other commands after exec, only exit.
# exec $EXE ${EXE_PARAMS}
# exit 1

# These files are saved in execDir. Saving them in /tmp may be faster. 
STDOUT=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stdout
STDERR=c${CONFIG_ID}-${INSTANCE_ID}-${SEED}.stderr

# # Otherwise, save the output to a file, and parse the result from it.  (If
# # you wish to ignore segmentation faults you can use '{}' around the
# # command.)
# # If the command below fails, but you are not sure why, it may be useful to
# # print it before executing using 'echo', as in:
# echo "$EXE ${EXE_PARAMS} 1> ${STDOUT} 2> ${STDERR}"
# echo "$EXE --project=../ --threads 11 ../src/pcam_ga.jl ${EXE_PARAMS} 1> ${STDOUT} > ${STDERR}"
# $EXE --project=../ --threads 2 --startup-file=no --compiled-modules=no ../src/pcam_ga.jl ${EXE_PARAMS} 1> ${STDOUT} 2> ${STDERR}
# $EXE --project=../ --threads 2 --startup-file=no  ../src/pcam_ga.jl ${EXE_PARAMS} 1> ${STDOUT} 2> ${STDERR}

sbatch 1> $tmpfile <<EOF
#!/bin/bash 
#SBATCH --job-name=MAGE-irace-$PPID-$CONFIG_ID-${INSTANCE_ID}-${SEED}
#SBATCH --time=10:00:00
##SBATCH --partition=exlusive
#SBATCH --nodes 1
#SBATCH --ntasks=1
#SBATCH --ntasks-per-node=1
#SBATCH --cpus-per-task=36
#SBATCH --threads-per-core=2
#SBATCH --hint=multithread 
#SBATCH --mem-per-cpu=2G

###SBATCH --output=test-$CONFIG_ID-${INSTANCE_ID}-${SEED}.out

# CD
cd /tmpdir/delatorr/dev/PCAM

# LOAD MODULES
module purge
module load conda/4.9.2
module load python/3.8.5
module load julia/1.9.3
module load intelmpi chdb/1.0
conda activate mage

export JULIA_DEPOT_PATH=/tmpdir/delatorr/.julia
export UTCGP_PYTHON=~/.conda/envs/mage/bin/python
#export OMP_NUM_THREADS=4 #${SLURM_CPU_PER_TASK}
#echo $OMP_NUM_THREADS
export OPENBLAS_NUM_THREADS=1

# export UTCGP_CONSTRAINED=yes
# export UTCGP_MIN_INT=-10000
# export UTCGP_MAX_INT=10000
# export UTCGP_MIN_FLOAT=-10000
# export UTCGP_MAX_FLOAT=10000
# export UTCGP_SMALL_ARRAY=100
# export UTCGP_BIG_ARRAY=1000

echo "Start irace call!"
echo ${STDOUT}
echo $(placement 1 64 --hyper --mode=compact --ascii-art)
if [[ $? != 0 ]]
then
 echo "ERREUR DANS LE NOMBRE DE PROCESSES OU DE TACHES" 2>&1
 exit $?
fi

TMP=/tmpdir/delatorr/dev/PCAM/irace_slurm_ga_noracing/tmp
srun $(placement 1 64 --hyper --mode=compact) julia --project --threads=64 --startup-file=no --compiled-modules=no src/slurm_irace_ga_noracing.jl --budget 10000000 ${EXE_PARAMS} 1> \$TMP/$STDOUT 2> \$TMP/$STDERR
RET=\$?
echo "OK" >& 2
# mv \$TMP/* ./
# mv \$TMP/* /tmpdir/delatorr/dev/PCAM/irace_slurm_ga_noracing
# rmdir -p \$TMP &> /dev/null
exit \$RET
EOF

# This may be used to introduce a delay if there are filesystem issues.
# SLEEPTIME=1
# while [ ! -s "${STDOUT}" ]; do
    # sleep $SLEEPTIME
    # let "SLEEPTIME += 1"
# done

# Give JOB ID 
rc=$?
if [[ $rc == 0 ]]; then
    JOBID=$(grep -o -e "Submitted batch job [^ ]\+" $tmpfile | cut -f4 -d ' ')
    if ! [[ "$JOBID" =~ ^[_-.@0-9A-Za-z]+$ ]] ; then
        error "$0: cannot parse jobID from the output of sbatch!"
    fi
    echo "$JOBID"
    rm -f $tmpfile
    exit $rc
else
    error "$0: sbatch failed!"
fi
